import rga_op_time


class WriterSequential
  def go(rga : RGA<int>, v : int ) : void {
    let start = rga.append(v);
    repeat i <- 1000 {
      start = rga.addAfter(get start, v);
    }
  }

class ReaderSum
  def go(rga : RGA<int>, r : int, w : int, orderedIter : bool) : void {
    repeat i <- 10 {
      let iter = if (orderedIter) then get rga.iterator() else null;
      let uiter = if (not orderedIter) then get rga.iteratorUnordered() else null;
      let break = false;
      let c = 0;
      while (not break) {
        match if(orderedIter) then iter.next() else uiter.next() with
        Nothing => break = true
        Just (elem, id) => {
          if (elem == r) then {
            c = c + 1
          }
        }
      };
      let last = rga.append(w);
      rga.addAfter(get last, c);
    }
  }

class WriterRandom
  def go(rga : RGA<int>, randSeq : [int], v : int, orderedIter : bool) : void {
    repeat i <- |randSeq| {
      let iter = if (orderedIter) then get rga.iterator() else null;
      let uiter = if (not orderedIter) then get rga.iteratorUnordered() else null;
      let size = get rga.size();
      let counter = randSeq[i] % size;
      let break = false;
      let location = null : NodeID;
      while (not break) {
        match if(orderedIter) then iter.next() else uiter.next() with
        Nothing => break = true
        Just (elem, id) => {
          if (counter == 0) then {
            location = id
          };
          counter = counter - 1;
        }
      };

      if (location != null) then {
        repeat i <- 10 {
          location = get rga.addAfter(location, v)
        }
      }
    }
  }

class Remover
  def go(rga : RGA<int>, v : int) : void {
    repeat i <- 3 {
      let iter = get rga.iterator();
      let break = false;
      while (not break) {
        match iter.next() with
        Nothing => break = true
        Just (elem, id) => {
          if (elem == v) then {
            rga.remove(id)
          }
        }
      }
    }
  }

class Replacer
  def go(rga : RGA<int>, v : int, replacement : int) : void {
    repeat i <- 3 {
      let iter = get rga.iterator();
      let break = false;
      while (not break) {
        match iter.next() with
        Nothing => break = true
        Just (elem, id) => {
          if (elem == v) then {
            rga.set(id, replacement)
          }
        }
      }
    }
  }

class Main {
  def main() : void {
    let rga = new RGA<int>();
    let r1 = randomSeq(50, 0, 10000, 967483);
    let r2 = randomSeq(50, 0, 10000, 634523);
    let waits = new [Fut void](5);
    tic();
    waits[0] = (new WriterSequential()).go(rga, 1);
    waits[1] = (new ReaderSum()).go(rga, 1, 10, false);
    waits[2] = (new ReaderSum()).go(rga, 1, 11, true);
    waits[3] = (new WriterRandom()).go(rga, r1, 2, false);
    waits[4] = (new WriterRandom()).go(rga, r1, 3, true);

    repeat i <- |waits| {
      get waits[i]
    };
    rga.wait();
    print("Elapsed time: {}\n", toc());
    let iter = get rga.iterator();
    let break = false;
    while (not break) {
      match iter.next() with
      Nothing => break = true
      Just (elem, id) => {
        print(elem);
      }
    }
  }
}
