import all

def eq(a : int, b : int) : bool {
  a == b
}

def intToInt(a : int) : int {
  a
}

class Worker<s>
  def go(adds : int, set : s, add : (s, int) -> void, contains : (s, int) -> void) : void {
    repeat i <- adds { -- / 100
      add(set, i);
      --contains(set, i)
    };
    --repeat i <- adds {
    --  contains(set, i)
    --}
  }

  def wait() : void ()

passive class Runner<s>
  def init(set : s, name : String, adds : int, add : (s, int) -> void, wait : (s) -> void, contains : (s, int) -> void) : void {
    let workers = new [Worker<s>](4); -- TOOD this 4 should be argument from main
    repeat i <- |workers| {
      workers[i] = new Worker<s>()
    };

    tic();
    repeat i <- |workers| {
      (workers[i])!go(adds, set, add, contains)
    };
    repeat i <- |workers| {
      get (workers[i]).wait()
    };
    wait(set);
    print("{}: {} ms\n", name, toc());
  }

class Main
  def main() : void {
    let runs = 2;
    let adds = 100000;
    let workers = 4;

    let hashSetAdd = \(hs : ActiveHashSet<int>, elem : int) -> {hs.add(elem); ()};
    let hashSetWait = \(hs : ActiveHashSet<int>) -> {get hs.wait(); ()};
    let hashSetContains = \(hs : ActiveHashSet<int>, elem : int) -> {hs.contains(elem); ()};

    let divTimeAdd = \(dts : DivTimeSet<int>, elem : int) -> dts.add(elem);
    let divTimeWait = \(dts : DivTimeSet<int>) -> dts.wait();
    let divTimeContains = \(dts : DivTimeSet<int>, elem : int) -> {dts.contains(elem); ()};

    let opOrAdd = \(oos : OpOrSet<int>, elem : int) -> oos.add(elem);
    let opOrWait = \(oos : OpOrSet<int>) -> oos.wait();
    let opOrContains = \(oos : OpOrSet<int>, elem : int) -> {oos.contains(elem); ()};

    repeat i <- runs {
      new Runner<ActiveHashSet<int>>(new ActiveHashSet<int>(eq, intToInt), "HashSet", adds, hashSetAdd, hashSetWait, hashSetContains);
      new Runner<DivTimeSet<int>>(new DivTimeSet<int>(eq, intToInt), "DivTimeSet", adds, divTimeAdd, divTimeWait, divTimeContains);
      new Runner<OpOrSet<int>>(new OpOrSet<int>(eq, intToInt), "OpOrSet", adds, opOrAdd, opOrWait, opOrContains);

    }
  }
