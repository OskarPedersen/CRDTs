bundle set_div_time where



class DistSet
  id : int
  maps : [ActiveHashMap_int_TimeOp]
  distSets : [DistSet]
  logicTime : int

  def init(id : int, maps : [ActiveHashMap_int_TimeOp]) : void {
    this.id = id;
    this.maps = maps;
    this.logicTime = 0;
  }

  def setDistSets(distSets : [DistSet]) : void {
    this.distSets = distSets;
  }

  def add(elem : int) : void {
    (this.maps[this.id]).put(elem, new TimeOp(true, this.logicTime))
  }

  def remove(elem : int) : void {
    (this.maps[this.id]).put(elem, new TimeOp(false, this.logicTime))
  }

  def ticTime() : void {
      this.logicTime = this.logicTime + 1
  }

  def contains(elem : int) : bool {
    let futs = new [Fut TimeOp](|this.maps|);
    let latestAdd = -1;
    let latestRemove = -1;

    repeat i <- |this.distSets| {
      (this.distSets[i]).ticTime()
    };

    repeat i <- |this.maps| {
        futs[i] = (this.maps[i]).getValue(elem);
    };

    repeat i <- |this.maps| {
      let timeOp = get (futs[i]);
      if (timeOp != null) then {
        if (timeOp.op == true) then {
          latestAdd = max(latestAdd, timeOp.time);
        } else {
          latestRemove = max(latestRemove, timeOp.time);
        }
      }
    };
    if (latestAdd == -1) then {
      false;
    } else {
      latestAdd > latestRemove
    }
  }

  def wait() : void {
    ()
  }

--public class
passive class DivTimeSet
  distSets : [DistSet]
  maps : [ActiveHashMap_int_TimeOp]

  def init() : void {
    let nc = numcores();
    this.distSets = new [DistSet](nc);
    this.maps = new [ActiveHashMap_int_TimeOp](nc);
    repeat i <- nc {
      this.maps[i] = new ActiveHashMap_int_TimeOp();
    };
    repeat i <- nc {
      this.distSets[i] = new DistSet(i, this.maps);
    };
    repeat i <- nc {
      (this.distSets[i]).setDistSets(this.distSets)
    }
  }

  def add(elem : int) : void {
    (this.distSets[core()]).add(elem)
  }

  def remove(elem : int) : void {
    (this.distSets[core()]).remove(elem)
  }

  def contains(elem : int) : Fut bool {
    (this.distSets[core()]).contains(elem)
  }

  def wait() : void {
    repeat i <- |this.distSets| {
      get (this.distSets[i]).wait();
      get (this.maps[i]).wait();
    }
  }

  --def iterator() : SetIterator<t> {
    --new SetIterator<t>(this, this.eq, this.toInt)
  --}

{-class SetIterator<t>
  hashSet : HashSet<t>
  buckets : [List<t>]
  bucket : int
  i : int
  endReached : bool

  def init(set : Set<t>, eq : (t, t) -> bool, toInt : (t) -> int) : void {
    this.hashSet = new HashSet<t>(eq, toInt);
    repeat s <- |set.maps| {
      this.hashSet.addAll(set.maps[s])
    };
    this.buckets = get this.hashSet.getBuckets();
    this.bucket = 0;
    this.i = 0;
    this.endReached = false;
  }

  def step() : void {
    this.i = this.i + 1;
    if (this.i >= (this.buckets[this.bucket]).size()) then {
      this.i = 0;
      this.bucket = this.bucket + 1;
      if (this.bucket >= |this.buckets|) then {
        this.endReached = true;
      }
    }
  }

  def next() : Maybe t {
    let
      break = false
    in {
      while (not break) {
        if (this.endReached) then {
          break = true
        } else if (this.bucket >= |this.buckets|) then {
          break = true
        } else if ((this.buckets[this.bucket]).latestOp(this.i) == true) then {
          break = true
        };
        if (not break) then {
          this.step()
        }
      };
      if (this.endReached) then {
        Nothing : Maybe t
      } else {
        let
          ret =  Just (this.buckets[this.bucket]).at(this.i)
        in {
          this.step();
          ret
        }
      }
    }
  } -}
