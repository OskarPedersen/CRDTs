import all
import test_utils

def test_seq(test : Test) : void {
  let set = new SubSet();

  test.assert(not get set.contains(1), "Not containing initially");

  set.add(1);

  test.assert(get set.contains(1), "contains added");

  set.remove(1);

  test.assert(not get set.contains(1), "Not containing removed element");

  set.add(1);
  set.add(2);

  test.assert(get set.contains(1), "Contains readded element");
  test.assert(get set.contains(2), "Contains newly added element");
}

def test_paradd(test : Test) : void {
  let set = new SubSet();
  let adders = new [Adder](10);
  repeat i <- |adders| {
    adders[i] = new Adder(set, i * 100);
  };
  repeat i <- |adders| {
    get (adders[i]).wait()
  };
  set.wait();

  test.assert(get set.contains(0), "Contains element added by one");
  test.assert(get set.contains(950), "Contains element added by several");
}

def test_paraddcontains(test : Test) : void {
  let set = new SubSet();
  let acs = new [AddContains](10);
  let num = 100;
  repeat i <- |acs| {
    acs[i] = new AddContains(set, test, i * num, (i + 3/2) * num)
  };
  repeat i <- |acs| {
    get (acs[i]).wait()
  };
  test.assert(not (get set.contains((1 + |acs|) * num)), "Does not contain unadded element");
  set.wait();
}

class Adder
  def init(set : SubSet, start : int) : void {
    repeat i <- 1000 {
      set.add(start + i);
    }
  }

  def wait() : void ()

class AddContains
  def init(set : SubSet, test : Test, start : int, endd : int) : void {
    repeat i <- endd - start {
      set.add(i + start);
    };
    test.assert(get set.contains(start), "Contains start element");
    test.assert(get set.contains(endd - 1), "Contains last element")
  }

  def wait() : void ()

class Main {
  def main() : void {
    let module = "Set Sub";
    test_seq(new Test(module, "Sequential"));
    test_paradd(new Test(module, "Concurrent Add"));
    test_paraddcontains(new Test(module, "Concurrent Add Contains"));
  }
}
