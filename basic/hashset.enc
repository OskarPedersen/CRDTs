bundle hashset where

passive class HashSet_int
  hashMap : HashMap_int_int

  def init() : void {
    this.hashMap = new HashMap_int_int()
  }

  def add(elem : int) : void {
    this.hashMap.put(elem, 0)
  }

  def remove(elem : int) : void {
    this.hashMap.remove(elem)
  }

  def removeAll(elems : HashSet_int) : void {
    this.hashMap.removeAll(elems)
  }

  def contains(elem : int) : bool {
    if (this.hashMap.getValue(elem) == -1) then {
      false
    } else {
      true
    }
  }

  def size() : int {
    this.hashMap.size()
  }

  def getHashMap() : HashMap_int_int{
    this.hashMap
  }

  def iterator() : HashSetIterator_int {
    new HashSetIterator_int(this)
  }

  def addAll(set : HashSet_int) : void {
    let break = false;
    let iter = set.iterator();
    while (not break) {
      let elem = iter.next();
      if (elem == -1) then {
        break = true
      } else {
        this.add(elem)
      }
    }
  }

  def clone() : HashSet_int {
    let set = new HashSet_int();
    set.addAll(this);
    set
  }

passive class HashSetIterator_int
  hashMapIterator : HashMapIterator_int_int

  def init(hashSet : HashSet_int) : void {
    this.hashMapIterator = hashSet.getHashMap().iterator();
  }


  def next() : int {
    let entry = this.hashMapIterator.next();
    if (entry == null) then {
      -1
    } else {
      entry.key
    }
  }

class ActiveHashSet_int
  hashSet : HashSet_int

  def init() : void {
    this.hashSet = new HashSet_int()
  }

  def add(elem : int) : void {
    this.hashSet.add(elem);
  }

  def remove(elem : int) : void {
    this.hashSet.remove(elem)
  }

  def removeAll(elems : HashSet_int) : void {
    this.hashSet.removeAll(elems)
  }

  def contains(elem : int) : bool {
    this.hashSet.contains(elem)
  }

  def size() : int {
    this.hashSet.size()
  }

  def wait() : void {
    ()
  }
