import all


class RoadGraph
  --vertices : HashSet_int
  edges : ActiveHashMap_VertexPair_int -- TODO do these two need to be active?
  neighbourMap : ActiveHashMap_int_List_int -- TODO ^ They should be read only except for initialization
  -- TODO ^ these two should also be of parallel maps!

  edgesPuts : int
  edgesGets : int

  neighbourPuts : int
  neighbourGets : int

  def init(numVertex : int) : void {
    --this.vertices = new HashSet_int();
    --repeat i <- numVertex {
    --  this.vertices.add(i);
    --};
    this.edges = new ActiveHashMap_VertexPair_int();
    this.edgesPuts = 0;
    this.edgesGets = 0;
    this.neighbourMap = new ActiveHashMap_int_List_int();
    this.neighbourGets = 0;
    this.neighbourPuts = 0;

    let min = 0;
    let max = 5;
    let seed = 7894;
    let randomValues = randomSeq(numVertex * numVertex, min, max, seed);
    let randomInitial = randomSeq(numVertex, 0, numVertex - 1, 12845);
    --print("RoadGraph: Random values created.");
    repeat i <- numVertex { -- This makes the graph connected
      if (i != 0) then {
        let pair = new VertexPair(i, randomInitial[i] % i);
        this.addEdge(pair);
      }
    };
    --print("RoadGraph: Graph connected.");
    repeat i <- numVertex { -- This adds some random edges (some may be duplicates)
      repeat j <- numVertex {
        let r = randomValues[i * numVertex + j];
        if ((i < j) and (r == max)) then {
          let pair = new VertexPair(i, j);
          this.addEdge(pair);
        }
      }
    };
    --print("RoadGraph: Random edges added");
    repeat i <- numVertex {
      repeat j <- numVertex {
        if (i < j) then {
          --print("RoadGraph: {} - {} = {}\n", i, j, this.getWeight(new VertexPair(i, j)));
          ()
        }
      }
    }
  }

  def getEdgesGets() : int {
    this.edgesGets
  }

  def getEdgesPuts() : int {
    this.edgesPuts
  }

  def getNeighbourGets() : int {
    this.neighbourGets
  }

  def getNeighbourPuts() : int {
    this.neighbourPuts
  }

  def getEdges() : ActiveHashMap_VertexPair_int {
    this.edges
  }

  def addEdge(pair : VertexPair) : void {
    let initialEdgeWeight = 100;
    this.edges.put(pair, initialEdgeWeight);
    this.edgesPuts = this.edgesPuts + 1;
    this.addNeighbour(pair.a, pair.b);
    this.addNeighbour(pair.b, pair.a);
  }

  def addNeighbour(vertex : int, neighbour : int) : void {
    this.neighbourGets = this.neighbourGets + 1;
    this.neighbourPuts = this.neighbourPuts + 1;
    let neighbourList = get this.neighbourMap.getValue(vertex);
    if (neighbourList == null) then {
      neighbourList = new List_int();
      neighbourList.add(neighbour);
      this.neighbourMap.put(vertex, neighbourList);
    } else {
      let newList = new List_int();
      repeat i <- neighbourList.size() {
        newList.add(neighbourList.at(i));
      };
      newList.add(neighbour);
      this.neighbourMap.put(vertex, newList);
    }
  }

  def getWeight(vp : VertexPair) : int {
    this.edgesGets = this.edgesGets + 1;
    get this.edges.getValue(vp);
  }

  def updateWeight(vp : VertexPair, newWeight : int) : void {
    this.edgesPuts = this.edgesPuts + 1;
    this.edges.put(vp, newWeight);
  }

  def getNeighbourMap() : ActiveHashMap_int_List_int {
    this.neighbourMap
  }


class ShortestPaths
  map : __SP_SET__
  -- TODO this could be just a matrix (almost entierly filled)
  gets : int
  updateQueue : UpdateQueue

  def init() : void {
    this.map = new __SP_SET__();
    this.gets = 0;

  }

  def setUpdateQueue(updateQueue : UpdateQueue) : void {
    this.updateQueue = updateQueue;
  }

  def getGets() : int {
    this.gets
  }

  def getNextVertex(current : int, goal : int) : int {
    this.gets = this.gets + 1;
    --let dbgSpins = 0;
    while (not get this.updateQueue.empty()) { -- TODO any way to do this without spinning, some sort of wait?
      --print("ShortestPaths: queue not empty");
      --dbgSpins = dbgSpins + 1;
      ()
    };
    --print("ShortestPaths: spins {}\n", dbgSpins);
    --print("ShortestPaths: queue empty");
    get this.map.getValue(new FromTo(current, goal));
  }

  def getNextVertexMap() : __SP_SET__ {
    this.map
  }

class UpdateQueue
  --list : List_FromTo
  pathWorkers : [PathWorker]
  nextWorker : int
  nextVertexMap : __SP_SET__
  neighbourMap : ActiveHashMap_int_List_int
  edges : ActiveHashMap_VertexPair_int

  def init(numVertex : int, nextVertexMap : __SP_SET__,
      neighbourMap : ActiveHashMap_int_List_int, edges : ActiveHashMap_VertexPair_int) : void {
    this.nextVertexMap = nextVertexMap;
    this.neighbourMap = neighbourMap;
    this.edges = edges;

    this.nextWorker = 0;
    this.pathWorkers = new [PathWorker](4);
    repeat i <- |this.pathWorkers| {
      this.pathWorkers[i] = new PathWorker(numVertex);
    };
    --print("Main: PathWorkers created.");

    --this.list = new List_FromTo();

    --print("UpdateQueue: init done");

  }

  def getEdgesGets() : int {
    let gets = 0;
    repeat i <- |this.pathWorkers| {
      gets = gets + get (this.pathWorkers[i]).getEdgesGets()
    };
    gets
  }

  def getNeighbourGets() : int {
    let gets = 0;
    repeat i <- |this.pathWorkers| {
      gets = gets + get (this.pathWorkers[i]).getNeighbourGets()
    };
    gets
  }

  def push(ft : FromTo) : void {
    --this.list.add(ft)
    get (this.pathWorkers[this.nextWorker]).calculatePath(ft, this.nextVertexMap,  this.neighbourMap, this.edges);
    this.nextWorker = this.nextWorker + 1;
    if (this.nextWorker >= |this.pathWorkers|) then {
      this.nextWorker = 0;
    }
  }

  def getPuts() : int {
    let puts = 0;
    repeat i <- |this.pathWorkers| {
      puts = puts + (get (this.pathWorkers[i]).getPuts());
    };
    puts
  }

  {- def pop() : FromTo {
    let size = this.list.size();
    if (size > 0) then {
      let path = this.list.at(size - 1);
      this.list.remove(size - 1);
      path;
    } else {
      null : FromTo
    }
  } -}

  def empty() : bool {
    --this.list.size() == 0
    true
  }

class PathWorker
  numVertex : int
  puts : int
  edgesGets : int
  neighbourGets : int

  def init(numVertex : int) : void {
    this.numVertex = numVertex;
    this.puts = 0;
    this.edgesGets = 0;
  }

  def getPuts() : int {
    this.puts;
  }

  def getEdgesGets() : int {
    this.edgesGets
  }

  def getNeighbourGets() : int {
    this.neighbourGets
  }

{-  def start(updateQueue : UpdateQueue, nextVertexMap : __SP_SET__,
      neighbourMap : ActiveHashMap_int_List_int, edges : ActiveHashMap_VertexPair_int) : void {
    while (true) { -- how/when should this end?
      suspend;
      let ft = get updateQueue.pop();
      if (ft == null) then {
        ()
      } else {
          --print("PathWorker: Calculate path");
          this.calculatePath(ft, nextVertexMap, neighbourMap, edges);
          --print("PathWorker: Finished calculating path");
      }
    }
  } -}

  def calculatePath(ft : FromTo, nextVertexMap : __SP_SET__,
      neighbourMap : ActiveHashMap_int_List_int, edges : ActiveHashMap_VertexPair_int) : void {
    let dist = new [int](this.numVertex);
    let prev = new [int](this.numVertex);
    let Q = new List_int();
    dist[ft.from] = 0;
    repeat i <- this.numVertex {
      if (i != ft.from) then {
        dist[i] = intMax();
        prev[i] = -1;
      };
      Q.add(i)
    };
    --print("PathWorker: Temporary path data initialized");
    let break = false;
    while ((Q.size() > 0) and (break == false)) {
      let min = intMax();
      let minVertex = -1;
      let minIndex = -1;
      repeat i <- Q.size() {
        if (dist[Q.at(i)] <= min) then {
          min = dist[Q.at(i)];
          minVertex = Q.at(i);
          minIndex = i;
        }
      };
      ----print("PathWorker: minIndex {}\n", minIndex);
      Q.remove(minIndex);
      if (minVertex == ft.to) then {
        break = true;
      } else {
        this.neighbourGets = this.neighbourGets + 1;
        let neighbours = get neighbourMap.getValue(minVertex);
        repeat i <- neighbours.size() {
          let n = neighbours.at(i);
          ----print("PathWorker: n {}\n", n);
          this.edgesGets = this.edgesGets + 1;
          let edgeDis = get edges.getValue(new VertexPair(minVertex, n));
          let alt = dist[minVertex] + edgeDis;
          if (alt < dist[n]) then {
            dist[n] = alt;
            prev[n] = minVertex;
          }
        }
      }
    };
    --print("PathWorker: Goal found");

    let c = ft.to;
    let p = prev[c]; -- TODO Will this get you the last before the goal? what if from and to are neighbours
    while (c != ft.from) {
      --print("PathWorker: c {} p {} from {} to {}\n", c, p, ft.from, ft.to);
      nextVertexMap.put(new FromTo(p, ft.to), c);
      --print("PathWorker: {} -> {} = {}\n", p, ft.to, c);
      nextVertexMap.put(new FromTo(c, ft.from), p); -- The reverse path
      this.puts = this.puts + 2;
      --print("PathWorker: {} -> {} = {} (reverse)\n", c, ft.from, p);
      c = p;
      p = prev[p];
    };
    --print("PathWorker: Path recreated");
  }

class WeightHandler
  randomEdges : [VertexPair]
  randomWeightDeltas : [int]
  numVertex : int
  randomEdgesIndex : int
  randomWeightDeltasIndex : int

  def init(numVertex : int, neighbourMap : ActiveHashMap_int_List_int) : void {
    this.numVertex = numVertex;
    let vertices = randomSeq(numVertex, 0, numVertex - 1, 8264);
    let neighbours = randomSeq(|vertices|, 0, intMax(), 9465);
    this.randomEdges = new [VertexPair](|vertices|);
    repeat i <- |vertices| {
      -- TODO neighbourGets
      let nl = get neighbourMap.getValue(vertices[i]);
      this.randomEdges[i] = new VertexPair(vertices[i], nl.at(neighbours[i] % nl.size()));
    };

    let maxDelta = 50;
    let wd = randomSeq(20, 0, maxDelta * 2, 29036);
    this.randomWeightDeltas = new [int](|wd|);
    repeat i <- |wd| {
      this.randomWeightDeltas[i] = wd[i] - maxDelta;
    };

    this.randomEdgesIndex = 0;
    this.randomWeightDeltasIndex = 0;
  }

  def changeWeight(roadGraph : RoadGraph, shortestPaths : ShortestPaths, updateQueue : UpdateQueue) : void {

    let vp = this.randomEdges[this.randomEdgesIndex];
    let weight = get roadGraph.getWeight(vp);
    if (weight != -1) then { --All edges should be valid, but ...
      let delta = this.randomWeightDeltas[this.randomWeightDeltasIndex];
      --print("WeightHandler: Changing vertex {}-{} from weight {} with delta {}.\n", vp.a, vp.b, weight, delta);
      roadGraph.updateWeight(vp, max(0, min(500, weight + delta)));
      if (delta > 0) then {
        this.recomputePathsIncreased(vp, shortestPaths, updateQueue);
      } else if (delta < 0) then {
        this.recomputePathsDecreased(vp, shortestPaths, updateQueue);
      }
    } else {
      --print("Non valid edge in start in WeightHandler");
      ()
    };

    this.randomEdgesIndex = this.randomEdgesIndex + 1;
    if (this.randomEdgesIndex >= |this.randomEdges|) then {
      this.randomEdgesIndex = 0;
    };

    this.randomWeightDeltasIndex = this.randomWeightDeltasIndex + 1;
    if (this.randomWeightDeltasIndex >= |this.randomWeightDeltas|) then {
      this.randomWeightDeltasIndex = 0;
    };

  }

  def recomputePathsIncreased(vp : VertexPair, shortestPaths : ShortestPaths, updateQueue : UpdateQueue) : void {
    repeat i <- this.numVertex {
      if (i != vp.a) then {
        if ((get shortestPaths.getNextVertex(vp.a, i)) == vp.b) then {
          -- The path from a to i goes through b
          -- TODO this will NOT find all paths going through a to b
          updateQueue.push(new FromTo(vp.a, i));
          ()
        }
      };
      if (i != vp.b) then {
        if ((get shortestPaths.getNextVertex(vp.b, i)) == vp.a) then {
          updateQueue.push(new FromTo(vp.b, i));
          ()
        }
      }
    }
  }

  def recomputePathsDecreased(vp : VertexPair, shortestPaths : ShortestPaths, updateQueue : UpdateQueue) : void {
    -- TODO this does only recompute going to a or b but not through the edge a-b ?
    repeat i <- this.numVertex {
      if (i != vp.a) then {
        if ((get shortestPaths.getNextVertex(vp.a, i)) != vp.b) then {
          updateQueue.push(new FromTo(vp.a, i));
          ()
        }
      };
      if (i != vp.b) then {
        if ((get shortestPaths.getNextVertex(vp.b, i)) != vp.a) then {
          updateQueue.push(new FromTo(vp.b, i));
          ()
        }
      }
    }
  }

passive class Car
  goal : int
  current : int

  def init(start : int, goal : int) : void {
    this.current = start;
    this.goal = goal;
  }

  def travel(roadGraph : RoadGraph, shortestPaths : ShortestPaths) : bool {
    if (this.current == this.goal) then {
      true
    } else {
      let dbgSpins = 0;
      let next = get shortestPaths.getNextVertex(this.current, this.goal);
      while (next == -1) { -- TODO why is this spin needed?
        next = get shortestPaths.getNextVertex(this.current, this.goal);
        dbgSpins = dbgSpins + 1;
      };
      print("Car: Travel spins: {}\n", dbgSpins);
      this.current = next;
      --print("Car: current {}\n", this.current);
      false
    }
  }

class CarGroup
  cars : [Car]

  def init(seed : int, neighbourMap : ActiveHashMap_int_List_int, numVertex : int) : void {
    let numCars = 1;
    this.cars = new [Car](numCars);
    let carNodes = randomSeq(numCars * 2, 0, numVertex - 1, seed);

    repeat i <- numCars {
      let start = carNodes[i * 2];
      --let next =  (get neighbourMap.getValue(carNodes[i * 2])).at(0); -- TODO get random neighbour
      let goal = carNodes[i * 2 + 1];
      -- TODO does not handle if start == goal, but that should not happen very often
      this.cars[i] = new Car(start, goal);
    };
  }

  def start(weightHandler : WeightHandler, roadGraph : RoadGraph, shortestPaths : ShortestPaths, updateQueue : UpdateQueue) : void {
    let finished = false;
    while (not finished) {
      finished = true;
      repeat i <- |this.cars| {
        if (not (this.cars[i]).travel(roadGraph, shortestPaths)) then {
          finished = false;
        }
      };
      --print("CarGroup: Cars has traveled");

      get weightHandler.changeWeight(roadGraph, shortestPaths, updateQueue); -- TODO now the same weightHandler is used, should there be one per car group?
      --print("CarGroup: WeightHandler has changeWeight");
    }
  }

class Main {
  def main() : void {
    let numVertex = 50;
    let roadGraph = new RoadGraph(numVertex);
    --print("Main: RoadGraph created.");

    let sp = new ShortestPaths();
    --print("Main: ShortestPaths created.");
    let neighbourMap = get roadGraph.getNeighbourMap();
    let wh = new WeightHandler(numVertex, neighbourMap);
    --print("Main: WeightHandler created.");
    let uq = new UpdateQueue(numVertex, get sp.getNextVertexMap(),
        neighbourMap, get roadGraph.getEdges());
    sp.setUpdateQueue(uq);
    --print("Main: UpdateQueue created.");


    let numCarGroups = 4;
    let carGroupSeeds = randomSeq(numCarGroups, 0, 1000, 9363);
    let carGroups = new [CarGroup](numCarGroups);
    repeat i <- |carGroups| {
      carGroups[i] = new CarGroup(carGroupSeeds[i], neighbourMap, numVertex);
    };
    --print("Main: CarGroups created.");
    let carGroupFuts = new [Fut void](numCarGroups);

    print("Main: Setup complete.");
    tic(); -- TODO TODO should we measure the setup time as well?
    repeat i <- numVertex {
      repeat j <- numVertex {
        if (i < j) then {
          uq.push(new FromTo(i, j));
          -- We only push one of each path since i j == j i and both will be calculated at the same time
          ()
        }
      }
    };
    print("Main: Initial paths pushed");
    repeat i <- numCarGroups {
      carGroupFuts[i] = (carGroups[i]).start(wh, roadGraph, sp, uq);
    };
    print("Main: Car Groups started.");
    repeat i <- numCarGroups {
      get carGroupFuts[i];
    };
    print("Main: Car Groups finished.");
    let time = toc();
    print("Time: {} ms\n", time);
    print("Number of gets: {}\n", get sp.getGets());
    let puts = get uq.getPuts();
    print("Number of puts: {}\n", puts);

    let edgePuts = get roadGraph.getEdgesPuts();
    let edgeGetsRG = get roadGraph.getEdgesGets();
    let edgeGetsUQ = get uq.getEdgesGets();
    print("Number of edge gets: {}\n", (edgeGetsRG + edgeGetsUQ));
    print("Number of edge puts: {}\n", (edgePuts));

    let neighbourPuts = get roadGraph.getNeighbourPuts();
    let neighbourGetsRG = get roadGraph.getNeighbourGets();
    let neighbourGetsUQ = get uq.getNeighbourGets();
    print("Number of neighbour gets: {}\n", (neighbourGetsUQ + neighbourGetsRG));
    print("Number of neighbour puts: {}\n", neighbourPuts);
    embed void exit(EXIT_SUCCESS); end;
  }
}
