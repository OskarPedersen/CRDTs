bundle map_sub where

passive class SubMap_FromTo_int
  subMaps : [ActiveHashMap_FromTo_int]

  def init () : void {
    let nc = numcores();
    this.subMaps = new [ActiveHashMap_FromTo_int](nc);
    repeat i <- nc {
      this.subMaps[i] = new ActiveHashMap_FromTo_int()
    }
  }

  def put(key : FromTo, next : int) : void {
    1--(this.subMaps[(key.from + key.to * 73) % |this.subMaps|]).put(key, next)
  }

  def getValue(key : FromTo) : int {
    1--get (this.subMaps[(key.from + key.to * 73) % |this.subMaps|]).getValue(key)
  }

  def hash(key : FromTo) : int {
    (key.from + key.to * 73) % |this.subMaps|
  }

  def wait() : void {
    repeat i <- |this.subMaps| {
      get (this.subMaps[i]).wait();
    }
  }


passive class SubMap_VertexPair_int
  subMaps : [ActiveHashMap_VertexPair_int]

  def init () : void {
    let nc = numcores();
    this.subMaps = new [ActiveHashMap_VertexPair_int](nc);
    repeat i <- nc {
      this.subMaps[i] = new ActiveHashMap_VertexPair_int()
    }
  }

  def put(key : VertexPair, next : int) : void {
    (this.subMaps[this.hash(key)]).put(key, next)
  }

  def getValue(key : VertexPair) : Fut int {
    (this.subMaps[this.hash(key)]).getValue(key)
  }

  def hash(key : VertexPair) : int {
    (key.a + key.b * 73) % |this.subMaps|
  }

  def wait() : void {
    repeat i <- |this.subMaps| {
      get (this.subMaps[i]).wait();
    }
  }


passive class SubMap_int_List_int
  subMaps : [ActiveHashMap_int_List_int]

  def init () : void {
    let nc = numcores();
    this.subMaps = new [ActiveHashMap_int_List_int](nc);
    repeat i <- nc {
      this.subMaps[i] = new ActiveHashMap_int_List_int()
    }
  }

  def put(key : int, next : List_int) : void {
    (this.subMaps[this.hash(key)]).put(key, next)
  }

  def getValue(key : int) : Fut List_int {
    (this.subMaps[this.hash(key)]).getValue(key)
  }

  def hash(key : int) : int {
    (key * 73) % |this.subMaps|
  }

  def wait() : void {
    repeat i <- |this.subMaps| {
      get (this.subMaps[i]).wait();
    }
  }
