bundle all where

import utils
import collections
import set_div_time
import set_op_or
import set_sub
import rga_op_time

import map_sub
import map_op_or

import map_div_time


-- This needs some manual chnages to work (on puts) therefore it is here
class DistMap_int_List_int
  id : int
  maps : [ActiveHashMap_int_TimeValue_List_int]

  def init(id : int, maps : [ActiveHashMap_int_TimeValue_List_int]) : void {
    this.id = id;
    this.maps = maps;
  }

  def put(key : int, vertex : int) : void {
    let map = (this.maps[this.id]);
    let timeValue = get map.getValue(key);
    if (timeValue == null) then {
      let neighbourList = new List_int();
      neighbourList.add(vertex);
      map.put(key, new TimeValue_List_int(neighbourList));
    } else {
      let neighbourList = timeValue.value;
      let newList = new List_int();
      repeat i <- neighbourList.size() {
        newList.add(neighbourList.at(i));
      };
      newList.add(vertex);
      map.put(key, new TimeValue_List_int(neighbourList));
    }
  }

  def getValue(key : int) : List_int {
    let futs = new [Fut TimeValue_List_int](|this.maps|);
    let latestTime = -1;
    let latestValue = null : List_int;
    repeat i <- |this.maps| {
      futs[i] = (this.maps[i]).getValue(key)
    };
    repeat i <- |this.maps| {
      let timeValue = get (futs[i]);
      if (timeValue != null) then {
        if (timeValue.time > latestTime) then {
          latestTime = timeValue.time;
          latestValue = timeValue.value;
        }
      }
    };
    latestValue;
  }

  def wait() : void
    ()

passive class DivTimeMap_int_List_int
  distMaps : [DistMap_int_List_int]
  maps : [ActiveHashMap_int_TimeValue_List_int]

  def init() : void {
    let nc = numcores();
    this.distMaps = new [DistMap_int_List_int](nc);
    this.maps = new [ActiveHashMap_int_TimeValue_List_int](nc);
    repeat i <- nc {
      this.maps[i] = new ActiveHashMap_int_TimeValue_List_int();
    };
    repeat i <- nc {
      this.distMaps[i] = new DistMap_int_List_int(i, this.maps);
    }
  }

  def put(key : int, value : int) : void {
    (this.distMaps[core()]).put(key, value)
  }

  def getValue(key : int) : Fut List_int {
    (this.distMaps[core()]).getValue(key)
  }

  def wait() : void {
    repeat i <- |this.distMaps| {
      get (this.distMaps[i]).wait();
      get (this.maps[i]).wait();
    }
  }
