bundle utils where



embed
  #include <stdlib.h>
  #include <unistd.h>
  #include <sched.h>
  #include <sys/time.h>
  #include <stdlib.h>
  #include <time.h>

  long sysconf(int name);
  int sched_getcpu(void);

body

  int c_core() {
    return sched_getcpu();
  }

  int c_numcores() {
    return sysconf(_SC_NPROCESSORS_ONLN);
  }

  struct timeval start, stop, current;

  int64_t c_current() {
    if(gettimeofday(&current, NULL) == -1) {
      return -1;
    }
    return (current.tv_sec) * 1E6 + (current.tv_usec) ;
  }

  void c_tic() {
    gettimeofday(&start, NULL);
  }

  int64_t c_toc() {
    gettimeofday(&stop, NULL);
    return ((stop.tv_sec - start.tv_sec) * 1E6 + (stop.tv_usec - start.tv_usec)) / 1E3;
  }

  void c_seed(int64_t seed) {
    srand(seed);
  }

  int64_t c_rand() {
    return rand();
  }
end


def randomSeq(len : int, min : int, max : int, seed : int) : [int] {
  let seq = new [int](len);
  embed void c_seed(#{seed}); end;
  repeat i <- |seq| {
    seq[i] = (embed int c_rand(); end % (max - min + 1)) + min;
  };
  seq
}

def core() : int {
  let c = embed int c_core(); end;
  if (c == -1) then {
    exitMsg("sched_getcpu() returned -1");
  };
  c

}

def numcores() : int {
  embed int c_numcores(); end

}

def max(a : int, b : int) : int {
    if (a > b) then {
      a
    } else {
      b
    }
}

def tic() : void {
  embed void c_tic(); end
}

def toc() : int {
  embed int c_toc(); end
}

def currentTime() : int {
  embed int c_current(); end
}

def exitMsg(msg : String) : void {
  print("Error: {}. Exiting.\n", msg);
  embed void exit(EXIT_FAILURE); end
}

def sleep(milliseconds : int) : void {
    let ret = embed int nanosleep((const struct timespec[]){{0, #{milliseconds}*1000000L}}, NULL); end
    if (ret == -1) then {
      print("Sleep failed");
    }
}
