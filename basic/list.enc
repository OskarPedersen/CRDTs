bundle list where
passive class List_int
  elems : [int]
  size : int

  def init() : void {
    this.elems = new [int](10);
    this.size = 0;
    --print("init this {}\n", this);
  }

  def realloc() : void {
    let
      newElems = new [int](|this.elems| * 2)
    in {
      repeat i <- |this.elems| {
        newElems[i] = this.elems[i]
      };
      this.elems = newElems;
    }
  }

  def add(elem : int) : void {
    this.size = this.size + 1;
    if (this.size > |this.elems|) then {
      this.realloc();
    };
    this.elems[this.size - 1] = elem;
  }

  def at(i : int) : int {
    this.boundsCheck(i);
    this.elems[i]
  }

  def set(i : int, elem : int) : void {
    this.boundsCheck(i);
    this.elems[i] = elem
  }

  def remove(i : int) : void {
    this.boundsCheck(i);
    repeat index <-this.size - i - 1 {
      this.elems[i + index] = this.elems[i + index + 1];
    };
    this.size = this.size - 1
  }

  def size() : int {
    this.size
  }

  def boundsCheck(i : int) : void {
    if ((i < 0) or (i >= this.size)) then {
      exitMsg("Index out of bounds");
    }
  }
passive class List_HashMapEntry_int_int
  elems : [HashMapEntry_int_int]
  size : int

  def init() : void {
    this.elems = new [HashMapEntry_int_int](10);
    this.size = 0;
    --print("init this {}\n", this);
  }

  def realloc() : void {
    let
      newElems = new [HashMapEntry_int_int](|this.elems| * 2)
    in {
      repeat i <- |this.elems| {
        newElems[i] = this.elems[i]
      };
      this.elems = newElems;
    }
  }

  def add(elem : HashMapEntry_int_int) : void {
    this.size = this.size + 1;
    if (this.size > |this.elems|) then {
      this.realloc();
    };
    this.elems[this.size - 1] = elem;
  }

  def at(i : int) : HashMapEntry_int_int {
    this.boundsCheck(i);
    this.elems[i]
  }

  def set(i : int, elem : HashMapEntry_int_int) : void {
    this.boundsCheck(i);
    this.elems[i] = elem
  }

  def remove(i : int) : void {
    this.boundsCheck(i);
    repeat index <-this.size - i - 1 {
      this.elems[i + index] = this.elems[i + index + 1];
    };
    this.size = this.size - 1
  }

  def size() : int {
    this.size
  }

  def boundsCheck(i : int) : void {
    if ((i < 0) or (i >= this.size)) then {
      exitMsg("Index out of bounds");
    }
  }
passive class List_HashMapEntry_int_TimeOp
  elems : [HashMapEntry_int_TimeOp]
  size : int

  def init() : void {
    this.elems = new [HashMapEntry_int_TimeOp](10);
    this.size = 0;
    --print("init this {}\n", this);
  }

  def realloc() : void {
    let
      newElems = new [HashMapEntry_int_TimeOp](|this.elems| * 2)
    in {
      repeat i <- |this.elems| {
        newElems[i] = this.elems[i]
      };
      this.elems = newElems;
    }
  }

  def add(elem : HashMapEntry_int_TimeOp) : void {
    this.size = this.size + 1;
    if (this.size > |this.elems|) then {
      this.realloc();
    };
    this.elems[this.size - 1] = elem;
  }

  def at(i : int) : HashMapEntry_int_TimeOp {
    this.boundsCheck(i);
    this.elems[i]
  }

  def set(i : int, elem : HashMapEntry_int_TimeOp) : void {
    this.boundsCheck(i);
    this.elems[i] = elem
  }

  def remove(i : int) : void {
    this.boundsCheck(i);
    repeat index <-this.size - i - 1 {
      this.elems[i + index] = this.elems[i + index + 1];
    };
    this.size = this.size - 1
  }

  def size() : int {
    this.size
  }

  def boundsCheck(i : int) : void {
    if ((i < 0) or (i >= this.size)) then {
      exitMsg("Index out of bounds");
    }
  }
passive class List_HashMapEntry_int_HashSet_int
  elems : [HashMapEntry_int_HashSet_int]
  size : int

  def init() : void {
    this.elems = new [HashMapEntry_int_HashSet_int](10);
    this.size = 0;
    --print("init this {}\n", this);
  }

  def realloc() : void {
    let
      newElems = new [HashMapEntry_int_HashSet_int](|this.elems| * 2)
    in {
      repeat i <- |this.elems| {
        newElems[i] = this.elems[i]
      };
      this.elems = newElems;
    }
  }

  def add(elem : HashMapEntry_int_HashSet_int) : void {
    this.size = this.size + 1;
    if (this.size > |this.elems|) then {
      this.realloc();
    };
    this.elems[this.size - 1] = elem;
  }

  def at(i : int) : HashMapEntry_int_HashSet_int {
    this.boundsCheck(i);
    this.elems[i]
  }

  def set(i : int, elem : HashMapEntry_int_HashSet_int) : void {
    this.boundsCheck(i);
    this.elems[i] = elem
  }

  def remove(i : int) : void {
    this.boundsCheck(i);
    repeat index <-this.size - i - 1 {
      this.elems[i + index] = this.elems[i + index + 1];
    };
    this.size = this.size - 1
  }

  def size() : int {
    this.size
  }

  def boundsCheck(i : int) : void {
    if ((i < 0) or (i >= this.size)) then {
      exitMsg("Index out of bounds");
    }
  }
passive class List_HashMapEntry_NodeID_RGANode
  elems : [HashMapEntry_NodeID_RGANode]
  size : int

  def init() : void {
    this.elems = new [HashMapEntry_NodeID_RGANode](10);
    this.size = 0;
    --print("init this {}\n", this);
  }

  def realloc() : void {
    let
      newElems = new [HashMapEntry_NodeID_RGANode](|this.elems| * 2)
    in {
      repeat i <- |this.elems| {
        newElems[i] = this.elems[i]
      };
      this.elems = newElems;
    }
  }

  def add(elem : HashMapEntry_NodeID_RGANode) : void {
    this.size = this.size + 1;
    if (this.size > |this.elems|) then {
      this.realloc();
    };
    this.elems[this.size - 1] = elem;
  }

  def at(i : int) : HashMapEntry_NodeID_RGANode {
    this.boundsCheck(i);
    this.elems[i]
  }

  def set(i : int, elem : HashMapEntry_NodeID_RGANode) : void {
    this.boundsCheck(i);
    this.elems[i] = elem
  }

  def remove(i : int) : void {
    this.boundsCheck(i);
    repeat index <-this.size - i - 1 {
      this.elems[i + index] = this.elems[i + index + 1];
    };
    this.size = this.size - 1
  }

  def size() : int {
    this.size
  }

  def boundsCheck(i : int) : void {
    if ((i < 0) or (i >= this.size)) then {
      exitMsg("Index out of bounds");
    }
  }
passive class List_HashMapEntry_NodeID_int
  elems : [HashMapEntry_NodeID_int]
  size : int

  def init() : void {
    this.elems = new [HashMapEntry_NodeID_int](10);
    this.size = 0;
    --print("init this {}\n", this);
  }

  def realloc() : void {
    let
      newElems = new [HashMapEntry_NodeID_int](|this.elems| * 2)
    in {
      repeat i <- |this.elems| {
        newElems[i] = this.elems[i]
      };
      this.elems = newElems;
    }
  }

  def add(elem : HashMapEntry_NodeID_int) : void {
    this.size = this.size + 1;
    if (this.size > |this.elems|) then {
      this.realloc();
    };
    this.elems[this.size - 1] = elem;
  }

  def at(i : int) : HashMapEntry_NodeID_int {
    this.boundsCheck(i);
    this.elems[i]
  }

  def set(i : int, elem : HashMapEntry_NodeID_int) : void {
    this.boundsCheck(i);
    this.elems[i] = elem
  }

  def remove(i : int) : void {
    this.boundsCheck(i);
    repeat index <-this.size - i - 1 {
      this.elems[i + index] = this.elems[i + index + 1];
    };
    this.size = this.size - 1
  }

  def size() : int {
    this.size
  }

  def boundsCheck(i : int) : void {
    if ((i < 0) or (i >= this.size)) then {
      exitMsg("Index out of bounds");
    }
  }
passive class List_HashMapEntry_VertexPair_int
  elems : [HashMapEntry_VertexPair_int]
  size : int

  def init() : void {
    this.elems = new [HashMapEntry_VertexPair_int](10);
    this.size = 0;
    --print("init this {}\n", this);
  }

  def realloc() : void {
    let
      newElems = new [HashMapEntry_VertexPair_int](|this.elems| * 2)
    in {
      repeat i <- |this.elems| {
        newElems[i] = this.elems[i]
      };
      this.elems = newElems;
    }
  }

  def add(elem : HashMapEntry_VertexPair_int) : void {
    this.size = this.size + 1;
    if (this.size > |this.elems|) then {
      this.realloc();
    };
    this.elems[this.size - 1] = elem;
  }

  def at(i : int) : HashMapEntry_VertexPair_int {
    this.boundsCheck(i);
    this.elems[i]
  }

  def set(i : int, elem : HashMapEntry_VertexPair_int) : void {
    this.boundsCheck(i);
    this.elems[i] = elem
  }

  def remove(i : int) : void {
    this.boundsCheck(i);
    repeat index <-this.size - i - 1 {
      this.elems[i + index] = this.elems[i + index + 1];
    };
    this.size = this.size - 1
  }

  def size() : int {
    this.size
  }

  def boundsCheck(i : int) : void {
    if ((i < 0) or (i >= this.size)) then {
      exitMsg("Index out of bounds");
    }
  }
